{"version":3,"sources":["components/Navbar.js","components/textForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","navCol","mode","id","className","to","title","type","aboutText","onClick","changeMode","TextForm","color","useState","text","setText","heading","onChange","event","target","value","name","rows","cols","col","toUpperCase","length","showAlert","toLowerCase","window","confirm","copyText","document","getElementById","select","navigator","clipboard","writeText","newText","split","join","word","countWords","trim","toFixed","defaultProps","row","column","Alert","style","height","alert","role","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","modes","bg","textBox","message","setTimeout","body","backgroundColor","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0edd61b2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  // return mode-code according to mode selected\r\n  const navCol = (mode) => {\r\n    if (mode === \"dark\" || mode === \"light\") return mode;\r\n    if (mode === \"green\") return \"primary\";\r\n    else return \"danger\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <nav\r\n        id=\"nav-bar\"\r\n        className=\r\n        {\r\n          `navbar \r\n          navbar-expand-lg \r\n          navbar-${navCol(props.mode)} \r\n          bg-${navCol(props.mode)}`\r\n        } \r\n      >\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand nav-text-col\" to=\"/\" id=\"nav-title\">\r\n            {props.title}\r\n          </Link>\r\n\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link\r\n                  className=\"nav-link nav-text-col active\"\r\n                  aria-current=\"page\"\r\n                  id=\"nav-home\"\r\n                  to=\"/\"\r\n                >\r\n                  Home\r\n                </Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link\r\n                  className=\"nav-link nav-text-col\"\r\n                  id=\"nav-about\"\r\n                  to=\"/about\"\r\n                >\r\n                  {props.aboutText}\r\n                </Link>\r\n              </li>\r\n            </ul>\r\n\r\n            <div>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-dark mx-2 border-dark\"\r\n                onClick={() => props.changeMode(\"dark\")}\r\n              >\r\n                Dark\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-light mx-2 border-dark\"\r\n                onClick={() => props.changeMode(\"light\")}\r\n              >\r\n                Light\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-success mx-2 border-dark\"\r\n                onClick={() => props.changeMode(\"green\")}\r\n              >\r\n                Green\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-primary mx-2 border-dark\"\r\n                onClick={() => props.changeMode(\"blue\")}\r\n              >\r\n                Blue\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\n// Set title and aboutText to String\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string,\r\n};\r\n\r\n// Incase title and abouText are not given use this\r\nNavbar.defaultProps = {\r\n  title: \"Set your title\",\r\n  aboutText: \"Write About Text Here\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  // convert to uppercase\r\n  const handleUpClick = () => {\r\n    setText(text.toUpperCase());\r\n    text.length > 0\r\n      ? props.showAlert(\"Text converted to UpperCase\", \"success\")\r\n      : props.showAlert(\"Please type something in the textbox first\", \"danger\");\r\n  };\r\n\r\n  // convert to LowerCase\r\n  const handleDownClick = () => {\r\n    setText(text.toLowerCase());\r\n    text.length > 0\r\n      ? props.showAlert(\"Text converted to LowerCase\", \"success\")\r\n      : props.showAlert(\"Please type something in the textbox first\", \"danger\");\r\n  };\r\n\r\n  // Change text on click\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  // Return word count\r\n  function countWords(text) {\r\n    let word = text.split(/\\s+/);\r\n    if (word[word.length - 1] === \"\") return word.length - 1;\r\n    return word.length;\r\n  }\r\n\r\n  // clear Text\r\n  const handleClearClick = () => {\r\n    setText(\"\");\r\n    let clearIt = window.confirm(\"Do you want to clear?\");\r\n    if (clearIt)\r\n      text.length > 0\r\n        ? props.showAlert(\"Cleared Text\", \"success\")\r\n        : props.showAlert(\"Nothing to clear\", \"warning\");\r\n    else props.showAlert(\"Didn't clear anything\", \"success\");\r\n  };\r\n\r\n  // copy text to Clip Board\r\n  const handleCopyClick = () => {\r\n    let copyText = document.getElementById(\"myBox\");\r\n    copyText.select();\r\n    navigator.clipboard.writeText(copyText.value);\r\n    text.length > 0\r\n      ? props.showAlert(\"Copied successfully to clipboard\", \"success\")\r\n      : props.showAlert(\"Please type something in the textbox first\", \"danger\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    text.length > 0\r\n      ? props.showAlert(\"Removed all extra spaces\", \"success\")\r\n      : props.showAlert(\"Please type something in the textbox first\", \"danger\");\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n\r\n  function previewText() {\r\n    if (text === \"\") return \"Nothing to Preview.\";\r\n    return text;\r\n  }\r\n\r\n  function reverse(color) {\r\n    if (color === \"dark\") return \"light\";\r\n    return \"dark\";\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>{props.heading}</h2>\r\n      <div className=\"mb-3\">\r\n        <textarea\r\n          id=\"myBox\"\r\n          onChange={handleOnChange}\r\n          value={text}\r\n          className={`exampleFormControlTextarea1 text-${reverse(\r\n            props.mode.name\r\n          )} p-2`}\r\n          rows=\"8\"\r\n          cols=\"130\"\r\n        ></textarea>\r\n      </div>\r\n      <button\r\n        className={`btn btn-${props.col} mx-2 my-1`}\r\n        onClick={handleUpClick}\r\n      >\r\n        Convert To UpperCase\r\n      </button>\r\n      <button\r\n        className={`btn btn-${props.col} mx-2 my-1`}\r\n        onClick={handleDownClick}\r\n      >\r\n        Convert To LowerCase\r\n      </button>\r\n      <button\r\n        className={`btn btn-${props.col} mx-2 my-1`}\r\n        onClick={handleClearClick}\r\n      >\r\n        Clear Text\r\n      </button>\r\n      <button\r\n        className={`btn btn-${props.col} mx-2 my-1`}\r\n        onClick={handleCopyClick}\r\n      >\r\n        Copy Text\r\n      </button>\r\n      <button\r\n        className={`btn btn-${props.col} mx-2 my-1`}\r\n        onClick={handleExtraSpaces}\r\n      >\r\n        Format Text\r\n      </button>\r\n\r\n      <h2 className=\"my-3\">Your Text Summary</h2>\r\n      <ul>\r\n        <li>\r\n          {countWords(text.trim())} <i>words</i> and {text.trim().length} <i>characters</i>\r\n        </li>\r\n        <li className=\"my-2\">\r\n          {(text.trim().length / 300).toFixed(3)} <i>Minutes</i> read\r\n        </li>\r\n      </ul>\r\n      <h2 className=\"my-2\">Text Preview</h2>\r\n      <div className=\"textPrev\">\r\n        <h5>\r\n          <li>{previewText()}</li>\r\n        </h5>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Default row and column of text-box\r\nTextForm.defaultProps = {\r\n  row: 7,\r\n  column: 135,\r\n};\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n\r\n  return (\r\n    <div style={{ height: \"48px\" }}>\r\n      {props.alert && (\r\n        <div\r\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n          role=\"alert\"\r\n        >\r\n          <strong>{capitalize(props.alert.type)}! </strong> {props.alert.msg}.\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import './App.css';\nimport React, { useState } from 'react'\nimport Navbar from './components/Navbar';\nimport TextForm from './components/textForm';\nimport Alert from './components/Alert';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const capitalize = (word) => {\n    const lower = word.toLowerCase();\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\n  }\n\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const darkMode = {\n    bg: '#132d46',\n    text: 'white',\n    textBox: '#e8dddc',\n    col: 'secondary'\n  }\n\n  const lightMode = {\n    bg: 'white',\n    text: 'black',\n    textBox: '#f8f9fa',\n    col: 'success'\n  }\n\n  const greenMode = {\n    bg: '#2bba94',\n    text: '#222',\n    textBox: '#d6b9b9',\n    col: 'danger'\n  }\n\n  const blueMode = {\n    bg: \"rgb(63 83 140)\",\n    text: 'rgb(245 197 197) ',\n    textBox: '#ffffff',\n    col: 'warning'\n  }\n\n  const modes = {\n    'light': lightMode,\n    'dark': darkMode,\n    'blue': blueMode,\n    'green': greenMode\n  }\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 1400);\n  }\n\n  const changeMode = (mode) => {\n    setMode(mode);\n    document.getElementById(\"nav-title\").style.color = modes[mode].text;\n    document.getElementById(\"nav-home\").style.color = modes[mode].text;\n    document.getElementById(\"nav-about\").style.color = modes[mode].text;\n    // document.getElementsByClassName(\"nav-text-col\").style.color = modes[mode].text;\n    document.body.style.backgroundColor = modes[mode].bg;\n    document.body.style.color = modes[mode].text;\n    let textBox = document.getElementById(\"myBox\");\n    textBox.style.backgroundColor = modes[mode].textBox;\n    showAlert(`${capitalize(mode)} Mode has been enabled`, \"success\");\n  }\n\n\nreturn (\n  <>\n    <Router>\n    <Navbar title=\"Text-Utils\" aboutText=\"About Text Utils\" changeMode={changeMode} mode={mode} modes={{ modes }} />\n    <Alert alert={alert} />\n    <div className=\"container my-3\">\n      <Switch>\n        <Route exact path=\"/\">\n        <TextForm heading=\"Enter the text to analyze below\" col={modes[mode].col} mode={mode} showAlert={showAlert} column={130} />\n        </Route>\n      </Switch>\n    </div>\n    </Router>\n  </>\n);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}